/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WavePortalInterface extends ethers.utils.Interface {
  functions: {
    "getLeaderBoard()": FunctionFragment;
    "getTotalWaves()": FunctionFragment;
    "getWaver(address)": FunctionFragment;
    "wave(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getLeaderBoard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalWaves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getWaver", values: [string]): string;
  encodeFunctionData(functionFragment: "wave", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "getLeaderBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalWaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWaver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wave", data: BytesLike): Result;

  events: {
    "NewWaveCreated(address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewWaveCreated"): EventFragment;
}

export class WavePortal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WavePortalInterface;

  functions: {
    getLeaderBoard(
      overrides?: CallOverrides
    ): Promise<[[string, string, string]]>;

    getTotalWaves(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWaver(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          ([string, BigNumber] & { message: string; timestamp: BigNumber })[],
          BigNumber,
          BigNumber
        ] & {
          addr: string;
          waves: ([string, BigNumber] & {
            message: string;
            timestamp: BigNumber;
          })[];
          waveCount: BigNumber;
          lastWavedAt: BigNumber;
        }
      ]
    >;

    wave(
      _message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getLeaderBoard(overrides?: CallOverrides): Promise<[string, string, string]>;

  getTotalWaves(overrides?: CallOverrides): Promise<BigNumber>;

  getWaver(
    addr: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      ([string, BigNumber] & { message: string; timestamp: BigNumber })[],
      BigNumber,
      BigNumber
    ] & {
      addr: string;
      waves: ([string, BigNumber] & {
        message: string;
        timestamp: BigNumber;
      })[];
      waveCount: BigNumber;
      lastWavedAt: BigNumber;
    }
  >;

  wave(
    _message: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getLeaderBoard(
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    getTotalWaves(overrides?: CallOverrides): Promise<BigNumber>;

    getWaver(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        ([string, BigNumber] & { message: string; timestamp: BigNumber })[],
        BigNumber,
        BigNumber
      ] & {
        addr: string;
        waves: ([string, BigNumber] & {
          message: string;
          timestamp: BigNumber;
        })[];
        waveCount: BigNumber;
        lastWavedAt: BigNumber;
      }
    >;

    wave(_message: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    NewWaveCreated(
      from?: string | null,
      timestamp?: null,
      message?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { from: string; timestamp: BigNumber; message: string }
    >;
  };

  estimateGas: {
    getLeaderBoard(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalWaves(overrides?: CallOverrides): Promise<BigNumber>;

    getWaver(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    wave(
      _message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLeaderBoard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalWaves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWaver(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wave(
      _message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
